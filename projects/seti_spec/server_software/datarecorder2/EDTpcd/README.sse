
EDT PCI SS-SSE (Synchronous Serial ECL)		August 10, 2004

Now support 3 simultaneous DMA channels ( 2 in and 1 out),
though PCI bandwidth will limit the maximum speed attainable.


########################################################
DESCRIPTION

The board has one 15-pin D connector, occupies one slot of your PCI bus.
Has 3 independent serial channels of 1 bit each and works in excess
of 400 MHz, may be limited by available PCI bus bandwidth. Drivers
for Windows NT/2K/XP, Solaris, and Linux are provided, along with
sample application programs.

Each channel accepts a differential data signal (two wires) and a
differential clock (two more wires) at standard ECL signal levels.
All incoming signals are terminated to -2 Volts through 50 ohms.

Channel 0 and 1 are used as inputs only
Channel 2 is used as output only.

NOTE: 	The data and clock signal for the output channel are not 
	terminated on this board. Therefore, no signals will be
	present if hooked up to a receiving end W/O termination.


########################################################
SOFTWARE INSTALLATION

Power up the machine without the board installed.
(MSWin2K will get confused if a driver is installed while a board
is in place.)

Install the standard EDT PCI-CD driver software from the CD-ROM
or from www.edt.com.  Reboot the machine with the board installed.
It may be necessary to run some of the stuff as root. Make sure
your path includes the current directory.


########################################################
HARDWARE INSTALLATION

Insert the PCD-SS-SSE board into one of your PCI slots

The DB15 connector on the PCD-SS-SSE is pinned out as followed:

		GND	=>	9

	Inputs:
		D0 +	=>	1
		D0 -	=>	2
		CLK0 +	=>	3
		CLK0 -	=>	4

		D1 +	=>	12
		D1 -	=>	7
		CLK1 +	=>	13
		CLK1 -	=>	8

	Outputs:
		D2 +	=>	10
		D2 -	=>	5
		CLK2 +	=>	15
		CLK2 -	=>	14	

Type "pciload" from the driver directory to verify that the driver sees
the board, and that the PCI Xilinx firmware is current. The SSE interface
firmware only works with the 4-channel PCI Xilinx firmware.
The following shows a correclty configured board:

	%1> pciload

	pcd unit 0 (pci ss-4):
	  XC2S200 PCI FPGA, AMD 29LV08AB 8MB FPROM
	  s/n ... , p/n ... , i/f fpga xcv600e, rev21 clock 10 Mhz, opt 600e
	  Sector 0
	  Sector 1
	  Sector 2  PROM  id: <pciss4.ncd 2s200fg456 2003/02/08 16:21:23>
	  Sector 3  PROM  id: <pciss4_5v.ncd 2s200fg456 2003/02/08 16:21:33>

If you do not have the correct driver in flash, the following command
will burn current firmware into flash:
	pciload pciss4 (specify the unit # if there're more than 1 board)

The system must be powered down completely then rebooted
before the new firmware in flash takes effect.


##########################################################
The following SS-SSE files are included in the EDT PCI-CD driver
(under Linux/Solaris: /opt/EDTpcd,	WinNT/2K/XP: C:\EDT\pcd):

	ss_sse.README		
			Instructions file

	ss_sse_framesync.README
			Frame Sync and Reed Soloman decoder notes
			
	sseload.c		
			A utility for programming the Virtex 2 Pro
			Xilinx and the PLL on daughter board

	bitfiles/XCV600E/eclopt_sse.bit
			 sse_rs_decoder.bit (w/ Reed Soloman decoder)

		Config bitfiles for baseboard xilinx

	bitfiles/XC2VP2/sseio.bit	
			sseio_asm.bit (w/ ASM check)
		Config bitfile for daughterboard xilinx

	bitfiles/XC2VP2/ssein.bit	
		Selftest bitfile with internal prbs code 
		generator. 


###########################################################
TEST

1 board:
	run "sseload -b ssein"

     This will program the base board with "eclopt_sse.bit" and the
     mezzanie board with "ssein.bit" and by default sets the PLL
     to 100 MHz.

     The data for the 2 input channels are generated by an internal
     PRBS code generator.

     So you can verify the data by running
	"chkprbs15 -c 0 -n 2 -l 1000"

     There shouldn't be any error displayed on the screen.

     You can also set the clock to a different rate by running:
	"sseload -F frequency"

   NOTE: The frequency's unit is in "MHz" and it has to be in
	 the range 50-800


board to board:
	run  "sseload -u 0"
	then "sseload -u 1"

     This will program both installed boards with "eclopt_sse.bit"
     and "sseio.bit" for the actual data acquisition.
     Again both boards's PLL are set to 100 MHz.

     Now you can generate PRBS data on one board by running:
	"genprbs15 -u unit -c 2 -n 1 -l 0"

     and verify on the other board by running:
	"chkprbs15 -u unit -c 0 -n 1 -l 1000"
        or
	"chkprbs15 -u unit -c 1 -n 1 -l 1000"
	depends on which input channel to be used.


###############################################
NOTE for using the REED SOLOMAN DECODER:

     The Reed Soloman decoder is embedded into Input Channel 0.
     Running "sseload -R" will load the bitfiles for use with
     REED SOLOMAN decoding.

     The baseboard will be programmed with "sse_rs_decoder.bit" which
     has an internal Reed Soloman Decoder.

     The mezzanie board will be programmed with "sseio_asm.bit" which checks
     for the ASM before sending a block of data to the decoder.

  IMPORTANT:
     PLL 0 is used as the decoding clock for the Reed Soloman Decoder
     and needs to be set to 66MHz in order to keep up with a 200 MHz
     serial stream.
     Reasons:
	The decoder has a processing delay of 660 symbol clocks. With
	a 200Mb/s bitstream, which is 25MB/s, the decoder needs to decode
	the data at a much faster rate so that it can decode continuously.
	The rule is:
		( Pll0's freq / (serial_freq/8) )  >(greater)  660/255
     
     After running "sseload -u unit -R", set the decoder clock by running

	"set_ss_vco -u unit -F 66000000 0"


SENDING A FILE:

     The "wfile.c" is a simple program that reads from a file
     and send the data from the file to the output DMA channel

	"wfile -u unit -c channel file_name"

READING AND STORE TO A FILE

     The "rfile.c" is a simple program that reads the data from
     the input DMA channel and write the data out to a file

	"rfile -u unit -c channel file_name"

   NOTE: Need to add "rfile" and "wfile" to the makefile's TARGETS




################################################################
REGISTER DESCRIPTION


Command Register- 0x00
R/W implemented.

BIT	NAME		DESCRIPTION
------------------------------------------
2-0	Not Used
 3	CMD_EN		Enable the bitfile	   
7-4	Not Used



Configuration 1 Register  0x0F
R/W implemented.

BIT	NAME		DESCRIPTION
------------------------------------------
 0	BSWAP		Byte Swap	   
2-1	Not Used	
 3	SSWAP		Short Swap	 
7-4	Not Used



Channel Enable Register  0x10
R/W implemented.
 
BIT	NAME		DESCRIPTION
------------------------------------------
2-0	CH_ENABLE	A one in a bit enables the corresponding 
			serial channel.	   
7-3	Not Used



Least Significant Bit First Register  0x16
R/W implemented.
 
BIT	NAME		DESCRIPTION
------------------------------------------
2-0	LSB_First	When set, each bit is moved toward the least 
			significant bit of the parallel data word. 
			When 32 bits are received the word is written 
			to computer memory. When cleared the most 
			significant bit of a 32 bit word is the first bit. 
			Byte swap and short swap can also effect the orber 
			of bytes in a 32 bit word.	   
7-3	Not Used



Underflow Register  0x18
Read only implemented.
 
BIT	NAME		DESCRIPTION
------------------------------------------
1-0	Not Used
 2	UNDERFLOW	A one indicates the output channel ( channel 2) 
			has underflowed the internal FIFO since the last 
			CMD_EN or CHANNEL_ENABLE. Reset by disabling 
			channel and then enabling.	   
7-3	Not Used



Overflow Register  0x1A
Read only implemented.
 
BIT	NAME		DESCRIPTION
------------------------------------------
1-0	OVERFLOW	A one indicates this channel's FIFO has overflowed 
			since the last CMD_EN or CHANNEL_ENABLE. 
			Reset by disabling channel and then enabling.	   
7-2	Not Used



PLL Programming Register  0x20
R/W implemented. 

The program set_ss_vco uses this register to program the serial interface 
of the four PLL.
 
BIT	NAME		DESCRIPTION
------------------------------------------
3-0	PLL_STROBE	Connected to the strobe inputs of PLL 3 to 0 
			respectively	   
4-5	Not Used
 6	PLL_DATA	Connected to all four PLL serial data inputs.	   
 7	PLL_SCLK	Connected to all four PLL serial clock inputs.	 



PLL 0 Divider Register  0x24 and 0x25
R/W implemented. 

This register is set by set_ss_vco. It is a post scalar divider used 
to achieve lower frequencies than the PLLs can be programmed. 
After this division the clocks are divided by 2 again to even the 
duty cycle. Set_ss_vco considers all these effects.
PLL0 is used as the clock for the Reed Soloman decoder

     (pll0_clock / (serial_clock/8))  (needs to be greater than)  660/255

 
BIT	NAME		DESCRIPTION
------------------------------------------
15-0	PLL0DIV		Programmable post divider.	 




PLL 1 Divider Register  0x26 and 0x27
R/W implemented but not used
 
BIT	NAME		DESCRIPTION
------------------------------------------
15-0	PLL1DIV		Programmable post divider




PLL 2 Divider Register 0x28 and 0x29
R/W implemented but not used
 
BIT	NAME		DESCRIPTION
------------------------------------------
15-0	Not Used	Not Used	 




PLL 3 Divider Register  0x2A and 0x2B
R/W implemented but not used
 
BIT	NAME		DESCRIPTION
------------------------------------------
15-0	Not Used	Not Used	 




Board ID Register  0x7F
Read only  implemented. 

BIT	NAME		DESCRIPTION
------------------------------------------
3-0	BOARD_ID	Reads back the ID of the mezzanine card installed.	   


PLL Programming Register  0x80
R/W implemented. 

The program sseload uses this register to program the high speed PLL 
on the mezzanine card.
The reference clock input of the PLL comes from a 16 MHz oscillator.

BIT	NAME		DESCRIPTION
------------------------------------------
 0	SLOAD		Connected to the sload input of the PLL	   
 1	SDATA		Connected to the sdata input of the PLL	   
 2	SCLK		Connected to the sclk input of the PLL.	   
7-3	Not Used




LED Control Register  0x82
R/W implemented. 
This register turns on and off the blinking of 2 LEDs 
on the mezzanine board
 
BIT	NAME		DESCRIPTION
------------------------------------------
 0     	BLINK		A '1' blinks one of the two LEDs.	   
7-1	Not Used




CLOCK Control Register  0x84
R/W implemented.  
This register selects the clock source for the output channel
 
BIT	NAME		DESCRIPTION
------------------------------------------
 0 	CLK_ENABLE	A '1' will turn off the output clock
 1	CLK_SELECT	'0' => use hi speed PLL, 50-800 MHz
				sseload -u unit -F frequency
			'1' => use PLL1 from base board to go below 50 MHz
				set_ss_vco -u unit -F frequency 1	
7-2	Not Used




Dummy Registers


0xA0  Read only implemented
	The value of this register reflects the value of the 
	Command Register on the Mezzanine board side.


0xB0  Read only implemented
	The value of this register reflects the value of the 
	Channel Enable Register on the Mezzanine board side.

###########################################################


Updates can be obtained from:

	ftp://ftp.edt.com/pub/pcd/ss_sse/





Tyler Q. Nguyen
EDT Hardware
tyler@edt.com
503-690-1234
