Terminals which are not used

   BYTE


Grammar

    0 $accept: list $end

    1 list: /* empty */
    2     | list construct
    3     | list error
    4     | list COMMENT

    5 construct: STRUCT VAR LBRACE vars RBRACE SEMI

    6 vars: vars line
    7     | line

    8 line: COMMENT
    9     | CHARSTAR VAR LB VAR RB SEMI
   10     | notchar VAR SEMI
   11     | notchar VAR LB VAR RB SEMI
   12     | notchar VAR LB VAR RB LB VAR RB SEMI
   13     | STRUCT VAR VAR LB VAR RB SEMI
   14     | STRUCT VAR VAR SEMI

   15 notchar: typepp
   16        | UNSIGNED typepp
   17        | UNSIGNED CHARSTAR

   18 typepp: DOUBLE
   19       | FLOAT
   20       | LONG
   21       | LONGLONG
   22       | INTEGER
   23       | SHORT


Terminals, with rules where they appear

$end (0) 0
error (256) 3
STRUCT (258) 5 13 14
LBRACE (259) 5
RBRACE (260) 5
SEMI (261) 5 9 10 11 12 13 14
LB (262) 9 11 12 13
RB (263) 9 11 12 13
DOUBLE (264) 18
INTEGER (265) 22
LONG (266) 20
LONGLONG (267) 21
FLOAT (268) 19
SHORT (269) 23
UNSIGNED (270) 16 17
CHARSTAR (271) 9 17
BYTE (272)
VAR (273) 5 9 10 11 12 13 14
COMMENT (274) 4 8


Nonterminals, with rules where they appear

$accept (20)
    on left: 0
list (21)
    on left: 1 2 3 4, on right: 0 2 3 4
construct (22)
    on left: 5, on right: 2
vars (23)
    on left: 6 7, on right: 5 6
line (24)
    on left: 8 9 10 11 12 13 14, on right: 6 7
notchar (25)
    on left: 15 16 17, on right: 10 11 12
typepp (26)
    on left: 18 19 20 21 22 23, on right: 15 16


state 0

    0 $accept: . list $end

    $default  reduce using rule 1 (list)

    list  go to state 1


state 1

    0 $accept: list . $end
    2 list: list . construct
    3     | list . error
    4     | list . COMMENT

    $end     shift, and go to state 2
    error    shift, and go to state 3
    STRUCT   shift, and go to state 4
    COMMENT  shift, and go to state 5

    construct  go to state 6


state 2

    0 $accept: list $end .

    $default  accept


state 3

    3 list: list error .

    $default  reduce using rule 3 (list)


state 4

    5 construct: STRUCT . VAR LBRACE vars RBRACE SEMI

    VAR  shift, and go to state 7


state 5

    4 list: list COMMENT .

    $default  reduce using rule 4 (list)


state 6

    2 list: list construct .

    $default  reduce using rule 2 (list)


state 7

    5 construct: STRUCT VAR . LBRACE vars RBRACE SEMI

    LBRACE  shift, and go to state 8


state 8

    5 construct: STRUCT VAR LBRACE . vars RBRACE SEMI

    STRUCT    shift, and go to state 9
    DOUBLE    shift, and go to state 10
    INTEGER   shift, and go to state 11
    LONG      shift, and go to state 12
    LONGLONG  shift, and go to state 13
    FLOAT     shift, and go to state 14
    SHORT     shift, and go to state 15
    UNSIGNED  shift, and go to state 16
    CHARSTAR  shift, and go to state 17
    COMMENT   shift, and go to state 18

    vars     go to state 19
    line     go to state 20
    notchar  go to state 21
    typepp   go to state 22


state 9

   13 line: STRUCT . VAR VAR LB VAR RB SEMI
   14     | STRUCT . VAR VAR SEMI

    VAR  shift, and go to state 23


state 10

   18 typepp: DOUBLE .

    $default  reduce using rule 18 (typepp)


state 11

   22 typepp: INTEGER .

    $default  reduce using rule 22 (typepp)


state 12

   20 typepp: LONG .

    $default  reduce using rule 20 (typepp)


state 13

   21 typepp: LONGLONG .

    $default  reduce using rule 21 (typepp)


state 14

   19 typepp: FLOAT .

    $default  reduce using rule 19 (typepp)


state 15

   23 typepp: SHORT .

    $default  reduce using rule 23 (typepp)


state 16

   16 notchar: UNSIGNED . typepp
   17        | UNSIGNED . CHARSTAR

    DOUBLE    shift, and go to state 10
    INTEGER   shift, and go to state 11
    LONG      shift, and go to state 12
    LONGLONG  shift, and go to state 13
    FLOAT     shift, and go to state 14
    SHORT     shift, and go to state 15
    CHARSTAR  shift, and go to state 24

    typepp  go to state 25


state 17

    9 line: CHARSTAR . VAR LB VAR RB SEMI

    VAR  shift, and go to state 26


state 18

    8 line: COMMENT .

    $default  reduce using rule 8 (line)


state 19

    5 construct: STRUCT VAR LBRACE vars . RBRACE SEMI
    6 vars: vars . line

    STRUCT    shift, and go to state 9
    RBRACE    shift, and go to state 27
    DOUBLE    shift, and go to state 10
    INTEGER   shift, and go to state 11
    LONG      shift, and go to state 12
    LONGLONG  shift, and go to state 13
    FLOAT     shift, and go to state 14
    SHORT     shift, and go to state 15
    UNSIGNED  shift, and go to state 16
    CHARSTAR  shift, and go to state 17
    COMMENT   shift, and go to state 18

    line     go to state 28
    notchar  go to state 21
    typepp   go to state 22


state 20

    7 vars: line .

    $default  reduce using rule 7 (vars)


state 21

   10 line: notchar . VAR SEMI
   11     | notchar . VAR LB VAR RB SEMI
   12     | notchar . VAR LB VAR RB LB VAR RB SEMI

    VAR  shift, and go to state 29


state 22

   15 notchar: typepp .

    $default  reduce using rule 15 (notchar)


state 23

   13 line: STRUCT VAR . VAR LB VAR RB SEMI
   14     | STRUCT VAR . VAR SEMI

    VAR  shift, and go to state 30


state 24

   17 notchar: UNSIGNED CHARSTAR .

    $default  reduce using rule 17 (notchar)


state 25

   16 notchar: UNSIGNED typepp .

    $default  reduce using rule 16 (notchar)


state 26

    9 line: CHARSTAR VAR . LB VAR RB SEMI

    LB  shift, and go to state 31


state 27

    5 construct: STRUCT VAR LBRACE vars RBRACE . SEMI

    SEMI  shift, and go to state 32


state 28

    6 vars: vars line .

    $default  reduce using rule 6 (vars)


state 29

   10 line: notchar VAR . SEMI
   11     | notchar VAR . LB VAR RB SEMI
   12     | notchar VAR . LB VAR RB LB VAR RB SEMI

    SEMI  shift, and go to state 33
    LB    shift, and go to state 34


state 30

   13 line: STRUCT VAR VAR . LB VAR RB SEMI
   14     | STRUCT VAR VAR . SEMI

    SEMI  shift, and go to state 35
    LB    shift, and go to state 36


state 31

    9 line: CHARSTAR VAR LB . VAR RB SEMI

    VAR  shift, and go to state 37


state 32

    5 construct: STRUCT VAR LBRACE vars RBRACE SEMI .

    $default  reduce using rule 5 (construct)


state 33

   10 line: notchar VAR SEMI .

    $default  reduce using rule 10 (line)


state 34

   11 line: notchar VAR LB . VAR RB SEMI
   12     | notchar VAR LB . VAR RB LB VAR RB SEMI

    VAR  shift, and go to state 38


state 35

   14 line: STRUCT VAR VAR SEMI .

    $default  reduce using rule 14 (line)


state 36

   13 line: STRUCT VAR VAR LB . VAR RB SEMI

    VAR  shift, and go to state 39


state 37

    9 line: CHARSTAR VAR LB VAR . RB SEMI

    RB  shift, and go to state 40


state 38

   11 line: notchar VAR LB VAR . RB SEMI
   12     | notchar VAR LB VAR . RB LB VAR RB SEMI

    RB  shift, and go to state 41


state 39

   13 line: STRUCT VAR VAR LB VAR . RB SEMI

    RB  shift, and go to state 42


state 40

    9 line: CHARSTAR VAR LB VAR RB . SEMI

    SEMI  shift, and go to state 43


state 41

   11 line: notchar VAR LB VAR RB . SEMI
   12     | notchar VAR LB VAR RB . LB VAR RB SEMI

    SEMI  shift, and go to state 44
    LB    shift, and go to state 45


state 42

   13 line: STRUCT VAR VAR LB VAR RB . SEMI

    SEMI  shift, and go to state 46


state 43

    9 line: CHARSTAR VAR LB VAR RB SEMI .

    $default  reduce using rule 9 (line)


state 44

   11 line: notchar VAR LB VAR RB SEMI .

    $default  reduce using rule 11 (line)


state 45

   12 line: notchar VAR LB VAR RB LB . VAR RB SEMI

    VAR  shift, and go to state 47


state 46

   13 line: STRUCT VAR VAR LB VAR RB SEMI .

    $default  reduce using rule 13 (line)


state 47

   12 line: notchar VAR LB VAR RB LB VAR . RB SEMI

    RB  shift, and go to state 48


state 48

   12 line: notchar VAR LB VAR RB LB VAR RB . SEMI

    SEMI  shift, and go to state 49


state 49

   12 line: notchar VAR LB VAR RB LB VAR RB SEMI .

    $default  reduce using rule 12 (line)
